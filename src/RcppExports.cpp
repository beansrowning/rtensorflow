// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// c_initializeSessionVariables
int c_initializeSessionVariables();
RcppExport SEXP _rtensorflow_c_initializeSessionVariables() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(c_initializeSessionVariables());
    return rcpp_result_gen;
END_RCPP
}
// c_loadGraphFromFile
int c_loadGraphFromFile(std::string path);
RcppExport SEXP _rtensorflow_c_loadGraphFromFile(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(c_loadGraphFromFile(path));
    return rcpp_result_gen;
END_RCPP
}
// c_loadSavedModel
int c_loadSavedModel(std::string path, CharacterVector tags);
RcppExport SEXP _rtensorflow_c_loadSavedModel(SEXP pathSEXP, SEXP tagsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type tags(tagsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_loadSavedModel(path, tags));
    return rcpp_result_gen;
END_RCPP
}
// setFeedInput
int setFeedInput(std::string op_name, List inp);
RcppExport SEXP _rtensorflow_setFeedInput(SEXP op_nameSEXP, SEXP inpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type op_name(op_nameSEXP);
    Rcpp::traits::input_parameter< List >::type inp(inpSEXP);
    rcpp_result_gen = Rcpp::wrap(setFeedInput(op_name, inp));
    return rcpp_result_gen;
END_RCPP
}
// c_runSession
List c_runSession(std::vector<std::string> op_names);
RcppExport SEXP _rtensorflow_c_runSession(SEXP op_namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type op_names(op_namesSEXP);
    rcpp_result_gen = Rcpp::wrap(c_runSession(op_names));
    return rcpp_result_gen;
END_RCPP
}
// resetGraph
int resetGraph();
RcppExport SEXP _rtensorflow_resetGraph() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(resetGraph());
    return rcpp_result_gen;
END_RCPP
}
// deleteSessionVariables
int deleteSessionVariables();
RcppExport SEXP _rtensorflow_deleteSessionVariables() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(deleteSessionVariables());
    return rcpp_result_gen;
END_RCPP
}
// getPlaceholder
std::string getPlaceholder(std::vector<int64_t> shape, std::string dtype, std::string op_name, std::string unique_name);
RcppExport SEXP _rtensorflow_getPlaceholder(SEXP shapeSEXP, SEXP dtypeSEXP, SEXP op_nameSEXP, SEXP unique_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< std::string >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< std::string >::type op_name(op_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type unique_name(unique_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(getPlaceholder(shape, dtype, op_name, unique_name));
    return rcpp_result_gen;
END_RCPP
}
// getSourceOp
std::string getSourceOp(List val, std::vector<int64_t> dim, std::string dtype, std::string op_name, std::string unique_name);
RcppExport SEXP _rtensorflow_getSourceOp(SEXP valSEXP, SEXP dimSEXP, SEXP dtypeSEXP, SEXP op_nameSEXP, SEXP unique_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type val(valSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< std::string >::type dtype(dtypeSEXP);
    Rcpp::traits::input_parameter< std::string >::type op_name(op_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type unique_name(unique_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(getSourceOp(val, dim, dtype, op_name, unique_name));
    return rcpp_result_gen;
END_RCPP
}
// getUnaryOp
std::string getUnaryOp(std::string inp, std::string op_name, std::string unique_name);
RcppExport SEXP _rtensorflow_getUnaryOp(SEXP inpSEXP, SEXP op_nameSEXP, SEXP unique_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inp(inpSEXP);
    Rcpp::traits::input_parameter< std::string >::type op_name(op_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type unique_name(unique_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(getUnaryOp(inp, op_name, unique_name));
    return rcpp_result_gen;
END_RCPP
}
// getBinaryOp
std::string getBinaryOp(std::string l_op, std::string r_op, std::string op_name, std::string unique_name);
RcppExport SEXP _rtensorflow_getBinaryOp(SEXP l_opSEXP, SEXP r_opSEXP, SEXP op_nameSEXP, SEXP unique_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type l_op(l_opSEXP);
    Rcpp::traits::input_parameter< std::string >::type r_op(r_opSEXP);
    Rcpp::traits::input_parameter< std::string >::type op_name(op_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type unique_name(unique_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(getBinaryOp(l_op, r_op, op_name, unique_name));
    return rcpp_result_gen;
END_RCPP
}
// getNodeList
List getNodeList();
RcppExport SEXP _rtensorflow_getNodeList() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getNodeList());
    return rcpp_result_gen;
END_RCPP
}
// catchError
int catchError();
RcppExport SEXP _rtensorflow_catchError() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(catchError());
    return rcpp_result_gen;
END_RCPP
}
// getErrorMessage
std::string getErrorMessage();
RcppExport SEXP _rtensorflow_getErrorMessage() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getErrorMessage());
    return rcpp_result_gen;
END_RCPP
}
// getOpProperties
List getOpProperties(std::string op_name);
RcppExport SEXP _rtensorflow_getOpProperties(SEXP op_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type op_name(op_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(getOpProperties(op_name));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP TF_GetAllOpList();

static const R_CallMethodDef CallEntries[] = {
    {"_rtensorflow_c_initializeSessionVariables", (DL_FUNC) &_rtensorflow_c_initializeSessionVariables, 0},
    {"_rtensorflow_c_loadGraphFromFile", (DL_FUNC) &_rtensorflow_c_loadGraphFromFile, 1},
    {"_rtensorflow_c_loadSavedModel", (DL_FUNC) &_rtensorflow_c_loadSavedModel, 2},
    {"_rtensorflow_setFeedInput", (DL_FUNC) &_rtensorflow_setFeedInput, 2},
    {"_rtensorflow_c_runSession", (DL_FUNC) &_rtensorflow_c_runSession, 1},
    {"_rtensorflow_resetGraph", (DL_FUNC) &_rtensorflow_resetGraph, 0},
    {"_rtensorflow_deleteSessionVariables", (DL_FUNC) &_rtensorflow_deleteSessionVariables, 0},
    {"_rtensorflow_getPlaceholder", (DL_FUNC) &_rtensorflow_getPlaceholder, 4},
    {"_rtensorflow_getSourceOp", (DL_FUNC) &_rtensorflow_getSourceOp, 5},
    {"_rtensorflow_getUnaryOp", (DL_FUNC) &_rtensorflow_getUnaryOp, 3},
    {"_rtensorflow_getBinaryOp", (DL_FUNC) &_rtensorflow_getBinaryOp, 4},
    {"_rtensorflow_getNodeList", (DL_FUNC) &_rtensorflow_getNodeList, 0},
    {"_rtensorflow_catchError", (DL_FUNC) &_rtensorflow_catchError, 0},
    {"_rtensorflow_getErrorMessage", (DL_FUNC) &_rtensorflow_getErrorMessage, 0},
    {"_rtensorflow_getOpProperties", (DL_FUNC) &_rtensorflow_getOpProperties, 1},
    {"TF_GetAllOpList",                           (DL_FUNC) &TF_GetAllOpList,                           0},
    {NULL, NULL, 0}
};

RcppExport void R_init_rtensorflow(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
