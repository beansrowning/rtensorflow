// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// instantiateSessionVariables
int instantiateSessionVariables();
RcppExport SEXP rtensorflow_instantiateSessionVariables() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(instantiateSessionVariables());
    return rcpp_result_gen;
END_RCPP
}
// loadGraphFromFile
int loadGraphFromFile(std::string path);
RcppExport SEXP rtensorflow_loadGraphFromFile(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(loadGraphFromFile(path));
    return rcpp_result_gen;
END_RCPP
}
// feedInput
int feedInput(std::string op_name, NumericVector inp, std::string type);
RcppExport SEXP rtensorflow_feedInput(SEXP op_nameSEXP, SEXP inpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type op_name(op_nameSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type inp(inpSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(feedInput(op_name, inp, type));
    return rcpp_result_gen;
END_RCPP
}
// setOutput
int setOutput(std::string op_name);
RcppExport SEXP rtensorflow_setOutput(SEXP op_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type op_name(op_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(setOutput(op_name));
    return rcpp_result_gen;
END_RCPP
}
// runSession
int runSession();
RcppExport SEXP rtensorflow_runSession() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(runSession());
    return rcpp_result_gen;
END_RCPP
}
// printIntOutputs
int printIntOutputs();
RcppExport SEXP rtensorflow_printIntOutputs() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(printIntOutputs());
    return rcpp_result_gen;
END_RCPP
}
// printDoubleOutputs
double printDoubleOutputs();
RcppExport SEXP rtensorflow_printDoubleOutputs() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(printDoubleOutputs());
    return rcpp_result_gen;
END_RCPP
}
// deleteSessionVariables
int deleteSessionVariables();
RcppExport SEXP rtensorflow_deleteSessionVariables() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(deleteSessionVariables());
    return rcpp_result_gen;
END_RCPP
}
// Placeholder
std::string Placeholder(std::string dtype);
RcppExport SEXP rtensorflow_Placeholder(SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(Placeholder(dtype));
    return rcpp_result_gen;
END_RCPP
}
// getConstant
std::string getConstant(NumericVector val, std::vector<int64_t> dim, std::string dtype);
RcppExport SEXP rtensorflow_getConstant(SEXP valSEXP, SEXP dimSEXP, SEXP dtypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type val(valSEXP);
    Rcpp::traits::input_parameter< std::vector<int64_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< std::string >::type dtype(dtypeSEXP);
    rcpp_result_gen = Rcpp::wrap(getConstant(val, dim, dtype));
    return rcpp_result_gen;
END_RCPP
}
// getUnaryOp
std::string getUnaryOp(std::string inp, std::string op_name);
RcppExport SEXP rtensorflow_getUnaryOp(SEXP inpSEXP, SEXP op_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inp(inpSEXP);
    Rcpp::traits::input_parameter< std::string >::type op_name(op_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(getUnaryOp(inp, op_name));
    return rcpp_result_gen;
END_RCPP
}
// getBinaryOp
std::string getBinaryOp(std::string l_op, std::string r_op, std::string op_name);
RcppExport SEXP rtensorflow_getBinaryOp(SEXP l_opSEXP, SEXP r_opSEXP, SEXP op_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type l_op(l_opSEXP);
    Rcpp::traits::input_parameter< std::string >::type r_op(r_opSEXP);
    Rcpp::traits::input_parameter< std::string >::type op_name(op_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(getBinaryOp(l_op, r_op, op_name));
    return rcpp_result_gen;
END_RCPP
}
// printOpList
void printOpList();
RcppExport SEXP rtensorflow_printOpList() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    printOpList();
    return R_NilValue;
END_RCPP
}
// locateError
void locateError();
RcppExport SEXP rtensorflow_locateError() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    locateError();
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"rtensorflow_instantiateSessionVariables", (DL_FUNC) &rtensorflow_instantiateSessionVariables, 0},
    {"rtensorflow_loadGraphFromFile", (DL_FUNC) &rtensorflow_loadGraphFromFile, 1},
    {"rtensorflow_feedInput", (DL_FUNC) &rtensorflow_feedInput, 3},
    {"rtensorflow_setOutput", (DL_FUNC) &rtensorflow_setOutput, 1},
    {"rtensorflow_runSession", (DL_FUNC) &rtensorflow_runSession, 0},
    {"rtensorflow_printIntOutputs", (DL_FUNC) &rtensorflow_printIntOutputs, 0},
    {"rtensorflow_printDoubleOutputs", (DL_FUNC) &rtensorflow_printDoubleOutputs, 0},
    {"rtensorflow_deleteSessionVariables", (DL_FUNC) &rtensorflow_deleteSessionVariables, 0},
    {"rtensorflow_Placeholder", (DL_FUNC) &rtensorflow_Placeholder, 1},
    {"rtensorflow_getConstant", (DL_FUNC) &rtensorflow_getConstant, 3},
    {"rtensorflow_getUnaryOp", (DL_FUNC) &rtensorflow_getUnaryOp, 2},
    {"rtensorflow_getBinaryOp", (DL_FUNC) &rtensorflow_getBinaryOp, 3},
    {"rtensorflow_printOpList", (DL_FUNC) &rtensorflow_printOpList, 0},
    {"rtensorflow_locateError", (DL_FUNC) &rtensorflow_locateError, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_rtensorflow(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
